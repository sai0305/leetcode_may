//Used binary search for searching in o(log n)


// The API isBadVersion is defined for you.
// bool isBadVersion(int version);

class Solution {
public:
    int firstBadVersion(int n)  
    {int start=1;
	
	int ans;
   if(n>2)    
   {while(start<=n)
	{//cout<<" s"<<(n+start)/2<<endl;
		if(isBadVersion(start+(n-start)/2)==true)
		{//cout<<"h1 "<<(n+start)/2<<endl;
			if(isBadVersion(start+(n-start)/2-1)==false)
			{
			ans= start+(n-start)/2;return ans;}
			else
			n=start+(n-start)/2;
			
		}
		
		else
		{
		start=start+(n-start)/2+1;//cout<<"h2 "<<start<<endl;
	}
		
		
	}}
        
else
{
   if(isBadVersion(2)==true)
   {
       if(isBadVersion(1)==false)
           return 2;
       else
           return 1;
       
   }
    
}
     return 1;
 
}};
